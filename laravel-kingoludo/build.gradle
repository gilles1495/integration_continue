buildscript {
  repositories {
    maven {
      url "https://plugins.gradle.org/m2/"
    }
  }
  dependencies {
    classpath "gradle.plugin.org.swissphpfriends:php-build-plugin:0.1-SNAPSHOT"
  }
}

apply plugin: "org.hasnat.php-build-plugin"
apply plugin: "distribution"
apply plugin: "maven-publish"

def majorVersion = System.getenv("MAJOR_VERSION") ?: "1"
def minorVersion = System.getenv("MINOR_VERSION") ?: "0"
version = majorVersion + "." + minorVersion 

task purge(type:Delete) {
  //println 'Cleaning up old files'
  delete 'vendor', 'logs', 'build'
}

task installDeps(type: org.swissphpfriends.gradle.task.ComposerInstall) {
    workingDirectory = "./_project"
    doNotUpdatePhar = true
}

task test(type:Exec, dependsOn: installDeps) {
  //println 'Executing tests'
  executable 'sh'
  args '-c', "php \
    './_project/vendor/phpunit/phpunit/phpunit' \
    --configuration='./_project/phpunit.xml' \
    --log-junit='./logs/unitreport.xml'\
    ./_project/tests"
}

task phploc(type: Exec, description: 'Measure project size using PHPLOC') {
	executable 'sh'
	args '-c',"/home/ubuntu/tools/phploc --count-tests \
    --log-csv='./build/reports/phploc.csv' \
    --log-xml='./build/reports/phploc.xml' \
     ./app"
}

task phpmd (type : Exec, description : "Perform project mess detection using PHPMD, and Creating a log file for the Continuous Integration Server"){
	executable 'sh'
	args '-c',"/home/ubuntu/tools/phpmd ./app \
    xml './phpmd.xml' \
    --reportfile './build/reports/phpmd.xml'\
    --ignore-violations-on-exit"
}

task phpcpd (type : Exec, description : "Find duplicate code using PHPCPD and log result in XML format."){
	executable 'sh'
	args '-c',"/home/ubuntu/tools/phpcpd \
    --log-pmd './build/reports/pmd-cpd.xml' \
    ./app"
}

task phpcs (type : Exec, description : "Find Coding Standard Violations using PHP_CodeSniffer"){
	executable 'sh'
	args '-c',"/home/ubuntu/tools/phpcs \
    --report=checkstyle \
    --report-file='./build/reports/checkstyle.xml' \
    --standard=PSR2 \
    --extensions=php \
    --ignore=autoload.php \
    --runtime-set ignore_errors_on_exit 1 \
    --runtime-set ignore_warnings_on_exit 1 \
    ./app/"
}

task phpdox (type : Exec, description : "Generating Docs enriched with pmd, checkstyle, phpcs,phpunit,phploc"){
	executable 'sh'
	args '-c',"/home/ubuntu/tools/phpdox \
    -f ./phpdox.xml"
}

def tarfile = "application-" + version
task packageDistribution(type: Zip, dependsOn: installDeps) {
    archiveFileName = tarfile + ".zip"
    destinationDirectory = file("_project/build")

    from ('_project/app') { into 'app' }
    from ('_project/bootstrap') { into 'bootstrap' }
    from ('_project/config') { into 'config' }
      from ('_project/database') { into 'database' }
      from ('_project/nbproject') { into 'nbproject' }
      from ('_project/public') { into 'public' }
      from ('_project/resources') { into 'resources' }
      from ('_project/storage') {
        into 'storage'
        dirMode 0775
      }
      from ('_project/vendor') { into 'vendor' }
      from { '_project/server.php' }
}

group = 'laravel-kingoludo'

publishing {
    publications {
        maven(MavenPublication) {
            artifact source: packageDistribution, extension: 'zip'
        }
    }
    repositories {
        maven {
            credentials {
                username nexusUsername
                password nexusPassword
            }
            url nexusRepo
        }
    }
}

assemble.dependsOn packageDistribution
   build.dependsOn assemble
 publish.dependsOn build